// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Entities
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;

    // DimAccount
    [Table("DimAccount", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DimAccount
    {
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"AccountKey", Order = 1, TypeName = "int")]
        [Index(@"PK_DimAccount", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Account key")]
        public int AccountKey { get; set; } // AccountKey (Primary key)

        [Column(@"ParentAccountKey", Order = 2, TypeName = "int")]
        [Display(Name = "Parent account key")]
        public int? ParentAccountKey { get; set; } // ParentAccountKey

        [Column(@"AccountCodeAlternateKey", Order = 3, TypeName = "int")]
        [Display(Name = "Account code alternate key")]
        public int? AccountCodeAlternateKey { get; set; } // AccountCodeAlternateKey

        [Column(@"ParentAccountCodeAlternateKey", Order = 4, TypeName = "int")]
        [Display(Name = "Parent account code alternate key")]
        public int? ParentAccountCodeAlternateKey { get; set; } // ParentAccountCodeAlternateKey

        [Column(@"AccountDescription", Order = 5, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Account description")]
        public string AccountDescription { get; set; } // AccountDescription (length: 50)

        [Column(@"AccountType", Order = 6, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Account type")]
        public string AccountType { get; set; } // AccountType (length: 50)

        [Column(@"Operator", Order = 7, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Operator")]
        public string Operator { get; set; } // Operator (length: 50)

        [Column(@"CustomMembers", Order = 8, TypeName = "nvarchar")]
        [MaxLength(300)]
        [StringLength(300)]
        [Display(Name = "Custom members")]
        public string CustomMembers { get; set; } // CustomMembers (length: 300)

        [Column(@"ValueType", Order = 9, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Value type")]
        public string ValueType { get; set; } // ValueType (length: 50)

        [Column(@"CustomMemberOptions", Order = 10, TypeName = "nvarchar")]
        [MaxLength(200)]
        [StringLength(200)]
        [Display(Name = "Custom member options")]
        public string CustomMemberOptions { get; set; } // CustomMemberOptions (length: 200)

        // Reverse navigation

        /// <summary>
        /// Child DimAccounts where [DimAccount].[ParentAccountKey] point to this entity (FK_DimAccount_DimAccount)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DimAccount> DimAccounts { get; set; } // DimAccount.FK_DimAccount_DimAccount
        /// <summary>
        /// Child FactFinances where [FactFinance].[AccountKey] point to this entity (FK_FactFinance_DimAccount)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<FactFinance> FactFinances { get; set; } // FactFinance.FK_FactFinance_DimAccount

        // Foreign keys

        /// <summary>
        /// Parent DimAccount pointed by [DimAccount].([ParentAccountKey]) (FK_DimAccount_DimAccount)
        /// </summary>
        [ForeignKey("ParentAccountKey")] public virtual DimAccount DimAccount_ParentAccountKey { get; set; } // FK_DimAccount_DimAccount

        public DimAccount()
        {
            DimAccounts = new System.Collections.Generic.List<DimAccount>();
            FactFinances = new System.Collections.Generic.List<FactFinance>();
        }
    }

}
// </auto-generated>
